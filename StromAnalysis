from pygeodesy import ellipsoidalVincenty as ev
import math
import os



def readStorm(file_path, prefix):
    with open(file_path, 'r') as f:
        lines_read = 0
        id = 0
        name = 0
        data = []
        previous = 0
        curr = 0
        meters = 0
        max_propagation = 0
        mean_propagation = 0
        propagation = 0
        previous_wind_speed = 0
        curr_wind_speed = 0
        total_relative_storm_energy = 0
        max_surface_area = 0

        for line in f:
            if line[:2] in prefix:
                info = [word.strip() for word in line.split(',')]
                id = info[0]
                name = info[1]
                lines_read = info[2]
                record_number = info[2]
            elif int(lines_read) > 0:
                detailed_info = [word.strip() for word in line.split(',')]
                previous = curr
                curr = ev.LatLon(detailed_info[4], detailed_info[5])

                if type(previous) != int:
                    meters = meters + curr.distanceTo(previous)
                    propagation = curr.distanceTo(previous) / 6
                if propagation > max_propagation:
                    max_propagation = propagation
                previous_wind_speed = curr_wind_speed
                curr_wind_speed = detailed_info[6]
                if previous_wind_speed != 0:
                    total_relative_storm_energy += math.pow(int(curr_wind_speed) / int(previous_wind_speed), 3) * 6
                if (int(detailed_info[16]) != -999 & int(detailed_info[17]) != -999) & (
                        int(detailed_info[18]) != -999 & int(detailed_info[19]) != -999):
                    surface_area = math.pi * ((int(detailed_info[16]) ** 2) / 4 + (int(detailed_info[17]) ** 2) / 4 + (
                                int(detailed_info[18]) ** 2) / 4 + (int(detailed_info[19]) ** 2) / 4)
                    if surface_area > max_surface_area:
                        max_surface_area = surface_area
                lines_read = int(lines_read) - 1
            if lines_read == 0:
                if int(record_number) != 1:
                    mean_propagation = meters / (int(record_number) - 1)
                ans = [id, name, round(meters, 2), round(mean_propagation, 2), round(max_propagation, 2),
                       round(total_relative_storm_energy, 2), round(max_surface_area, 2)]
                data.append(ans)
                curr = 0
                previous = 0
                meters = 0
                max_propagation = 0
                curr_wind_speed = 0
                previous_wind_speed = 0
                total_relative_storm_energy = 0
                max_surface_area = 0
                mean_propagation = 0
    # for list in data:
    #    print(list)
    return data

def writeIntoFile(place,data):
    if os.path.exists("A3output.txt"):
        append_write = 'a' # append if already exists
    else:
        append_write = 'w' # make a new file if not
    file = open("A3output.txt",append_write)
    file.write("\nThis is storm data analysis for {0}\n".format(place))
    file.write("{0:^18}{1:^18}{2:^18}{3:^18}{4:^18}{5:^18}{6:^18}\n".format("Storm_ID","name","distance","storm propagation","max propagation","storm energy", "max surface area" ))
    for storm in data:
        for info in storm:
            file.write("{0:^18}".format(info))
        file.write("\n")
    file.close()

def takeThird(elem):
    return elem[3]

def takeFifth(elem):
    return elem[5]

def takeSixth(elem):
    return elem[6]

def sortFastStorm(data):
    data.sort(key=takeThird,reverse=True)

def sortEnergeticStorm(data):
    data.sort(key=takeFifth,reverse=True)

def sortBigStorm(data):
    data.sort(key=takeSixth,reverse=True)

def printTopTen(data):
    for list in data[:10]:
        print(list)

def writeTopTen(data, standard):
    if os.path.exists("A3output.txt"):
        append_write = 'a' # append if already exists
    else:
        append_write = 'w' # make a new file if not
    file = open("A3output.txt",append_write)
    file.write("\nThis is storm data aggregate report analysis about top ten {0} storm\n".format(standard))
    file.write("{0:^18}{1:^18}{2:^18}{3:^18}{4:^18}{5:^18}{6:^18}\n".format("Storm_ID","name","distance","storm propagation","max propagation","storm energy", "max surface area" ))
    for storm in data[:10]:
        for info in storm:
            file.write("{0:^18}".format(info))
        file.write("\n")
    file.close()


def main():
    atlantic_file_path = '/Users/jimmytsai/Downloads/hurdat2-1851-2017-050118.txt'
    atlantic_prefix = ['AL']
    AL_data = readStorm(atlantic_file_path, atlantic_prefix)
    writeIntoFile("Atlantic", AL_data)
    NNCP_file_path = '/Users/jimmytsai/Downloads/hurdat2-nepac-1949-2017-050418.txt'
    NNCP_prefix = ['EP', 'CP']
    NNCP_data = readStorm(NNCP_file_path, NNCP_prefix)
    writeIntoFile("Northeast and North Central Pacific", NNCP_data)

    combined_data = AL_data + NNCP_data
    sortFastStorm(combined_data)
    writeTopTen(combined_data, 'fast')
    sortEnergeticStorm(combined_data)
    writeTopTen(combined_data, 'energetic')
    sortBigStorm(combined_data)
    writeTopTen(combined_data, 'big')

main()
